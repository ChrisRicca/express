!!!
%html
  %head
    %title Express - Plugins
    %link{ :rel => 'stylesheet', :href => 'style.css' }
  %body
    %a{ :href => PROJECT_URL }
      %img#ribbon{ :src => 'http://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png', :alt => 'Fork me on GitHub' }
  #wrapper
    #container
    
      %a#logo{ :href => 'http://github.com/visionmedia/express' } Express

      %ul#menu
        %li
          %a{ :href => 'index.html' } Home
          %a{ :href => 'intro.html' } Intro
          %a{ :href => 'settings.html' } Settings
          %a.active{ :href => 'plugins.html' } Plugins
      
      %h2 Plugins
          
      %p
        Express does not use "middleware" however
        %em Plugins
        take a similar form, allowing Express to
        respond to events, and extend core.
    
      %h2 Using Plugins
      
      %p 
        To use a plugin simply pass it to the
        %em use()
        function, after which each request will
        instantiate a new instance of your plugin,
        allowing it to perform request-specific 
        processing.
        
      %p
        For example using the core 
        %em Logger
        plugin we can require and pass it to
        %em use()
        \.
      
      %pre
        %code use(require('express/plugins/logger').Logger)
        
      %p As you can see, this is a bit messy; we can globalize these plugins by using
      
      %pre
        %code require('express/plugins')
      
      %p after which we can simply:
        
      %pre
        %code use(Logger)
        
      %p
        The 
        %em use()
        function may receive the same plugin several
        times, however the last will always take precedence.
        This is useful for example when core uses 
        %em Cache
        and
        %em View
        by default, however in your configurations you
        may wish to pass options like so:
        
      %pre
        %code use(Cache, { with: options })
      
      %h2 Writting Plugins
      
      %h3 Synchronous Example
      .sect
        %p
          Below is a basic profiler plugin example.
          First we extend the
          %em Plugin
          "class", and provide a few event handlers,
          in which we track the duration of a request
          by using the 
          %em request
          and
          %em response
          event handlers.
        
        %pre
          %code= snippit 'plugin.example.js'
          
      %h3 Asynchronous Example
      .sect
        %p
          Below we have an async example of a plugin,
          where
          %em someAsyncFunction()
          performs an async task such as
          IO, HTTP requests, DB interactions, etc.
          
        %p
          To indicate to Express that this event handler
          will be async, we must return
          %em true
          explicitly, and accept a
          %em callback
          function which should be called
          when your process has completed.
        
        %pre
          %code= snippit 'plugin.example.async.js'
        
      %h2 Core Required Plugins
      
      %ul
        %li
          %a{ :href => 'plugins.view.html' } View
          \- handles view rendering
        %li
          %a{ :href => 'plugins.redirect.html' } Redirect
          \- provides redirection support
        %li
          %a{ :href => 'plugins.body-decoder.html' } BodyDecoder
          \- automatically decodes common request bodies
        %li
          %a{ :href => 'plugins.cache.html' } Cache
          \- provides unified caching api with default memory store
      
      %h2 Core Optional Plugins
      
      %ul
        %li
          %a{ :href => 'plugins.logger.html' } Logger
          \- provides several request logging formats
        %li
          %a{ :href => 'plugins.content-length.html' } ContentLength
          \- automatically assigns the Content-Length response header
        %li
          %a{ :href => 'plugins.method-override.html' } MethodOverride
          \- allows RESTful route support via faux HTTP method using
          %em _method 
        %li
          %a{ :href => 'plugins.hooks.html' } Hooks
          \- provides before() and after() functions to act as request / response handlers
        %li
          %a{ :href => 'plugins.cookie.html' } Cookie
          \- provides low-level HTTP cookie support
        %li
          %a{ :href => 'plugins.session.html' } Session
          \- persistent session data with plug-able data store, with default memory store 
        %li
          %a{ :href => 'plugins.flash.html' } Flash
          \- provides persistent notification queue
        
      
